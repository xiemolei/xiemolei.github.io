<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mo.class Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-23T16:04:19.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mo.class</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker下mysql主从部署</title>
    <link href="http://example.com/2021/03/24/Docker%20%E4%B8%8Bmysql%E4%B8%BB%E4%BB%8E%E9%83%A8%E7%BD%B2%20/"/>
    <id>http://example.com/2021/03/24/Docker%20%E4%B8%8Bmysql%E4%B8%BB%E4%BB%8E%E9%83%A8%E7%BD%B2%20/</id>
    <published>2021-03-23T16:03:34.000Z</published>
    <updated>2021-03-23T16:04:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><ul><li>docker 1.13.1</li><li>mysql 8.0.20<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2></li></ul><ol><li><p>docker拉取mysql镜像（不展开）</p></li><li><p>docker启动一个mysql容器作为master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master --privileged=true -v /home/mysql/master-data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">（也可以写好配置文件，在docker命令中引用）如下：</span></span><br><span class="line">[mysqld]配置文件（主从各一，参数可参考）</span><br><span class="line">server_id = 1log-bin= mysql-bin</span><br><span class="line">read-only=0replicate-ignore-db=mysql</span><br><span class="line">replicate-ignore-db=sys</span><br><span class="line">replicate-ignore-db=information_schema</span><br><span class="line">replicate-ignore-db=performance_schema!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上了用配置文件启动</span></span><br><span class="line">docker run --name mastermysql -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -v ~/test/mysql_test/master/data:/var/lib/mysql -v ~/test/mysql_test/master/conf/my.cnf:/etc/mysql/my.cnf mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>--name</code>指定运行之后的容器的名称为<code>mysql-master</code>；</li><li><code>--privileged</code>指定了当前容器是否真正的具有root权限，所谓的root权限是指具有宿主机的root权限，而不仅仅只是在容器内部有root权限；</li><li><code>-v</code>指定了容器中指定目录挂载到宿主机上的某个目录（目录要提前创建），这样做的目的在于防止容器中配置的数据丢失，因为docker容器在重启之后是不会保留前一次在其内部运行的相关数据的；</li><li><code>-p</code>表示宿主机上的某个端口映射到docker容器内的某个端口，这里也就是将宿主机的3306端口映射到容器内部的3306端口；</li><li><code>-e</code>表示指定当前容器运行的环境变量，该变量一般在容器内部程序的配置文件中使用，而在外部运行容器指定该参数。这里的<code>MYSQL_ROOT_PASSWORD</code>表示容器内部的MySQL的启动密码；</li><li><code>-d</code>参数指定了当前容器是在后台运行。</li></ul></li></ol><ol start="3"><li>master库创建 授权主备复制专用账号（待补充）</li></ol><ul><li>进入容器，可以用客户端连接mysql后运行下面的命令，也可以进入docker的mysql容器 登陆后运行<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过容器id方式，这里的id就是上面docker ps中展示的id</span></span><br><span class="line">docker exec -it fa4afaeb24c4 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过容器名称方式，这里的名称就是创建容器时指定的名称，也就是mysql-master</span></span><br><span class="line">docker exec -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 5.7</span></span><br><span class="line"><span class="comment"># 授权主备复制专用账号</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql 8.0</span></span><br><span class="line"><span class="comment"># 创建账号</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment"># 修改密码按原生状态</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment"># 授权test账户可以主从复制</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"><span class="comment"># 查看master节点的binlog状态（查得的File和Position属性之后要用）</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| mysql-bin.000014 |      154 |              |                  |                   |</span><br><span class="line">+<span class="comment">------------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>启动另一个mysql容器作为slave，配置中指定连接的master（待补充）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-slave --privileged=true -v /home/mysql/slave-data:/var/lib/mysql -p 3307:3306 --link mysql-master:master -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure>从容器启动与主容器启动参数主要有一下两点：</li></ol><ul><li>所映射的宿主机的端口号不能与master容器相同，因为其已经被master容器占用；</li><li>必须加上<code>--link</code>参数，其后指定了当前容器所要连接的容器，<code>mysql-master</code>表示所要连接的容器的名称，<code>master</code>表示为该容器起的一个别名，通俗来讲，就是slave容器通过这两个名称都可以访问到master容器。这么做的原因在于，如果master与slave不在同一个docker network中，那么这两个容器相互之间是没法访问的。注意这一点非常重要，之前本人按照网上的搭建方式搭建主从服务器一直无法成功，主要就是因为他们一直没有提到要设置这个参数</li></ul><ol start="5"><li>切换slave的服务状态，连接上master（待补充）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入slave容器，连接后执行</span></span><br><span class="line">change master to master_host=<span class="string">&#x27;master&#x27;</span>, master_user=<span class="string">&#x27;test&#x27;</span>, master_password=<span class="string">&#x27;123456&#x27;</span>, master_port=<span class="number">3306</span>, master_log_file=<span class="string">&#x27;mysql-bin.000014&#x27;</span>, master_log_pos=<span class="number">154</span>, master_connect_retry=<span class="number">30</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>上述命令中，各个参数的含义其实比较好理解，主要就是指定master服务的域名（也就是我们前面link时使用的别名）、用户名、密码、端口，以及master节点的binlog文件和log的position。这里的binlog文件和log的position就是前面我们<code>show master status</code>;</li></ul><ol start="6"><li>启动主从复制，查看连接状态（如果是同一个镜像启动，没有用外置配置文件设置server_id属性，主从的server_id一定要不一样，启动后会连接io报错，可以进入容器后在etc/mysql/my.cfg中修改，之后再重新启动）（待补充）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启主从同步</span></span><br><span class="line">mysql&gt; <span class="built_in">start</span> slave;</span><br><span class="line"><span class="comment"># 开启完成之后，我们可以通过如下命令查看从服务器的连接状态</span></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** <span class="number">1</span>. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: master</span><br><span class="line">                  Master_User: test</span><br><span class="line">                  Master_Port: <span class="number">3306</span></span><br><span class="line">                Connect_Retry: <span class="number">30</span></span><br><span class="line">              Master_Log_File: mysql<span class="literal">-bin</span>.<span class="number">000014</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">154</span></span><br><span class="line">               Relay_Log_File: <span class="number">6774</span>ae81bc25<span class="literal">-relay</span><span class="literal">-bin</span>.<span class="number">000034</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">367</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="literal">-bin</span>.<span class="number">000014</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                         ....</span><br><span class="line">             Master_Server_Id: <span class="number">1</span></span><br><span class="line">                  Master_UUID: <span class="number">8976</span>b929<span class="literal">-bc8b</span><span class="literal">-11e9</span><span class="literal">-bab3</span><span class="literal">-0242ac110005</span></span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: <span class="number">0</span></span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind:</span><br><span class="line">                         ....</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> <span class="built_in">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>这两个参数是主从同步开启是否成功的重要标志，都为YES 标记正常</li></ol><ul><li>Slave_IO_Running: Yes</li><li>Slave_SQL_Running: Yes</li></ul><ol start="7"><li>验证同步（待补充）</li></ol><p>在master库中添加库，表，增删改，检查slave库是否同步。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>用一个images（镜像）创建主从两个容器，开启主从后Slave_IO_Running不为YES，开启失败。</li></ol><p>原因：发现是连个mysql的server_id相同，可以进入容器修改配置文件后 重新开启主从。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it mysql-slave /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker内的vim安装</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 同一局域网内注意要唯一</span></span></span><br><span class="line">server-id=100  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启二进制日志功能，可以随便取（关键）</span></span></span><br><span class="line">log-bin=master-bin</span><br><span class="line">binlog-format=ROW     // 二级制日志格式，有三种 row，statement，mixed</span><br><span class="line">binlog-do-db=数据库名  //同步的数据库名称,如果不配置，表示同步所有的库</span><br></pre></td></tr></table></figure><p>重启mysql，再试。</p><p>2.再次开启失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>原因：容器中依然保留之前relay_log的信息，所以导致启动slave报错。<br>mysql提供了工具用来删除记录：slave reset；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> reset slave;</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> change master to ......</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件版本&quot;&gt;&lt;a href=&quot;#软件版本&quot; class=&quot;headerlink&quot; title=&quot;软件版本&quot;&gt;&lt;/a&gt;软件版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;docker 1.13.1&lt;/li&gt;
&lt;li&gt;mysql 8.0.20&lt;h2 id=&quot;部署步骤&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>初始Python</title>
    <link href="http://example.com/2020/11/30/%E5%88%9D%E5%A7%8BPython/"/>
    <id>http://example.com/2020/11/30/%E5%88%9D%E5%A7%8BPython/</id>
    <published>2020-11-29T19:14:34.000Z</published>
    <updated>2021-03-23T16:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机是什么"><a href="#计算机是什么" class="headerlink" title="计算机是什么"></a>计算机是什么</h2><pre><code>在现实生活中，越来越无法离开计算机了    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。计算机就是一个用来计算的机器！目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛所以我们学习计算机，就是学习如何控制计算机！</code></pre><a id="more"></a><h2 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h2><pre><code>计算机由两部分组成：硬件 和 软件硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。    硬件是看的见摸得着的软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）    软件是看的见摸不着的，软件负责控制计算机中的硬件    </code></pre><h2 id="计算机的使用方式"><a href="#计算机的使用方式" class="headerlink" title="计算机的使用方式"></a>计算机的使用方式</h2><pre><code>我们必须要通过软件来对计算机完成各种操作，    但是注意，软件中并不是所有的功能都会对用户开放，        用户需要调用软件提供的接口（Interface 交互界面）来操作计算机用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）</code></pre><h2 id="windows的命令行"><a href="#windows的命令行" class="headerlink" title="windows的命令行"></a>windows的命令行</h2><pre><code>命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）命令行有多个不同的名字：    命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal    练习1：        通过搜索引擎来搜索一下，各个操作系统当中的命令行窗口的样式1.如何进入到命令行    win键 + R 出现运行窗口，输入cmd，然后回车2.命令行的结构    - 版本及版权声明（一般没有什么用）        Microsoft Windows [版本 10.0.16299.431]        (c) 2017 Microsoft Corporation。保留所有权利。    - 命令提示符        C:\Users\lilichao&gt;              C:                  - 当前所在的磁盘根目录                - 可以通过 x: 来切换盘符（x表示你的盘符）            \Users\lilichao                - 所在磁盘的路径，当前所在的文件夹                - cd 来切换目录            &gt;                - 命令提示符，在大于号后边可以直接输入指令    练习2：尝试使用多种方式进入到你的系统的命令行，并且观察你的和我的有什么区别？ 3.常用的dos命令    dir 查看当前目录下的所有文件（夹）    cd 进入到指定的目录        . 表示当前目录        .. 表示上一级目录    md 创建一个目录    rd 删除一个目录        del 删除一个文件    cls 清除屏幕    命令的语法        命令 [参数] [选项]    练习3：通过搜索引擎搜索一下其他的一些常用DOS命令，并尝试使用一些命令的选项    4.小技巧    - 方向键上下，查看命令的历史记录    - tab键自动补全命令        </code></pre><h2 id="环境变量（environment-variable）"><a href="#环境变量（environment-variable）" class="headerlink" title="环境变量（environment variable）"></a>环境变量（environment variable）</h2><pre><code>环境变量指的就是操作系统当中的一些变量。可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）1.查看环境变量    &gt; 右键 计算机（此电脑），选择属性    &gt; 系统界面左侧选择 高级系统设置    &gt; 选择环境变量    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量        建议只修改用户的环境变量，不要修改系统的环境变量2.添加环境变量    &gt; 通过新建按钮添加环境变量    &gt; 一个环境变量可以由多个值，值与值之间使用;（英文）隔开3.修改环境变量    &gt; 通过编辑按钮来修改环境变量4.删除环境变量    &gt; 通过删除按钮来删除环境变量练习4：进入到环境变量的界面，创建一个USERNAME环境变量，    修改USERNAME环境变量，并尝试添加多个值，然后删除USERNAME环境变量    </code></pre><h2 id="path环境变量"><a href="#path环境变量" class="headerlink" title="path环境变量"></a>path环境变量</h2><pre><code>path环境变量中保存的是一个一个的路径。当我们在命令行中输入一个命令（或访问一个文件时），    系统会首先在当前目录下寻找，如果找到了则直接执行或打开    如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止    如果path环境变量中的路径都没有找到，则报错        &#39;xxx&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，    这样我们就可以在任意的位置访问到这些文件了注意事项：    1.如果环境变量中没有path，可以手动添加    2.path环境变量不区分大小写 PATH Path path       3.修改完环境变量必须重新启动命令行窗口    4.多个路径之间使用;隔开练习5：在桌面创建一个hello文件夹，文件中创建一个abc.txt输入随意的内容        然后将hello的路径添加到path环境变量中，尝试在任意位置访问abc.txt        最后将hello路径从path环境变量中删除。             </code></pre><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><pre><code>- 十进制（最常用的进制）    - 十进制就是满十进一的进制    - 十进制当中一共有10个数字        0 1 2 3 4 5 6 7 8 9    - 十进制如何计数        0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30- 二进制（计算机底层使用的进制）    - 满二进一    - 二进制中一共有2个数字        0 1    - 二进制如何计数        0 1 10 11 100 101 110 111 1000    - 所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制    - 可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1    - 内存中的每一个小格子，我们称为1bit（位）            bit是计算机中的最小的单位        byte是我们最小的可操作的单位        8bit = 1byte（字节）            1024byte = 1kb（千字节）         1024kb = 1mb（兆字节）        1024mb = 1gb（吉字节）        1024gb = 1tb（太字节）        。。。- 八进制（一般不用）    - 满八进一    - 八进制中一共有8个数字        0 1 2 3 4 5 6 7    - 八进制如何计数        0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30- 十六进制    - 满十六进一    - 十六进制中一共有16个数字        由于十六进制是满16才进位，            所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15           0 1 2 3 4 5 6 7 8 9 a b c d e f     - 十六进制如何计数            0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f        20 21 22 。。。 2a 2b 2c 2d 2e 2f 30        - 我们在查看二进制数据时，一般会以十六进制的形式显示</code></pre><h2 id="文本文件和字符集"><a href="#文本文件和字符集" class="headerlink" title="文本文件和字符集"></a>文本文件和字符集</h2><pre><code>- 文本分成两种，一种叫做纯文本，还有一种叫做富文本- 纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）- 富文本中可以保存文本以外的内容（word文档）- 在开发时，编写程序使用的全都是纯文本！- 纯文本在计算机底层也会转换为二进制保存，    将字符转换为二进制码的过程，我们称为编码    将二进制码转换为字符的过程，我们称为解码    编码和解码时所采用的规则，我们称为字符集- 常见的字符集：    ASCII        - 美国人编码，使用7位来对美国常用的字符进行编码        - 包含128个字符    ISO-8859-1        - 欧洲的编码，使用8位        - 包含256个字符    GB2312    GBK        国标码，中国的编码    Unicode           万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码        Unicode编码有多种实现，UTF-8 UTF-16 UTF-32        最常用的就是UTF-8- 乱码    编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确        </code></pre><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><pre><code>- 纯文本编辑器- Package Control（Sublime的包管理器）    - Sublime Text3中的插件，通过该插件可以向Sublime中安装新的包- 练习：    1.安装Sublime Text3    2.在Sublime中安装Package Control    3.通过Package Control安装Sublime的中文语言包       4.尝试为你的Sublime安装新的主题（通过搜索引擎搜索） </code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计算机是什么&quot;&gt;&lt;a href=&quot;#计算机是什么&quot; class=&quot;headerlink&quot; title=&quot;计算机是什么&quot;&gt;&lt;/a&gt;计算机是什么&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;在现实生活中，越来越无法离开计算机了
    电脑、笔记本、手机、游戏机、汽车导航、智能电视 。。。
计算机就是一个用来计算的机器！
目前来讲，计算机只能根据人类的指令来完成各种操作，人让它干嘛他就得干嘛
所以我们学习计算机，就是学习如何控制计算机！&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="Testing" scheme="http://example.com/tags/Testing/"/>
    
    <category term="Another Tag" scheme="http://example.com/tags/Another-Tag/"/>
    
  </entry>
  
</feed>
